<?php
/**
 * UpdateOffer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenWPAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenWP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenWPAPI\Model;

use \ArrayAccess;
use \OpenWPAPI\ObjectSerializer;

/**
 * UpdateOffer Class Doc Comment
 *
 * @category Class
 * @package  OpenWPAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response' => 'string',
        'download' => 'string',
        'locale' => 'string',
        'packages' => '\OpenWPAPI\Model\UpdateOfferPackages',
        'current' => 'string',
        'version' => 'string',
        'php_version' => 'string',
        'mysql_version' => 'string',
        'new_bundled' => 'string',
        'partial_version' => 'string',
        'new_files' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response' => null,
        'download' => 'uri',
        'locale' => null,
        'packages' => null,
        'current' => null,
        'version' => null,
        'php_version' => null,
        'mysql_version' => null,
        'new_bundled' => null,
        'partial_version' => null,
        'new_files' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'response' => false,
        'download' => false,
        'locale' => false,
        'packages' => false,
        'current' => false,
        'version' => false,
        'php_version' => false,
        'mysql_version' => false,
        'new_bundled' => false,
        'partial_version' => true,
        'new_files' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response' => 'response',
        'download' => 'download',
        'locale' => 'locale',
        'packages' => 'packages',
        'current' => 'current',
        'version' => 'version',
        'php_version' => 'php_version',
        'mysql_version' => 'mysql_version',
        'new_bundled' => 'new_bundled',
        'partial_version' => 'partial_version',
        'new_files' => 'new_files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response' => 'setResponse',
        'download' => 'setDownload',
        'locale' => 'setLocale',
        'packages' => 'setPackages',
        'current' => 'setCurrent',
        'version' => 'setVersion',
        'php_version' => 'setPhpVersion',
        'mysql_version' => 'setMysqlVersion',
        'new_bundled' => 'setNewBundled',
        'partial_version' => 'setPartialVersion',
        'new_files' => 'setNewFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response' => 'getResponse',
        'download' => 'getDownload',
        'locale' => 'getLocale',
        'packages' => 'getPackages',
        'current' => 'getCurrent',
        'version' => 'getVersion',
        'php_version' => 'getPhpVersion',
        'mysql_version' => 'getMysqlVersion',
        'new_bundled' => 'getNewBundled',
        'partial_version' => 'getPartialVersion',
        'new_files' => 'getNewFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('download', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('current', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('php_version', $data ?? [], null);
        $this->setIfExists('mysql_version', $data ?? [], null);
        $this->setIfExists('new_bundled', $data ?? [], null);
        $this->setIfExists('partial_version', $data ?? [], null);
        $this->setIfExists('new_files', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response
     *
     * @return string|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string|null $response The response type (e.g., upgrade, autoupdate)
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets download
     *
     * @return string|null
     */
    public function getDownload()
    {
        return $this->container['download'];
    }

    /**
     * Sets download
     *
     * @param string|null $download URL to download the update
     *
     * @return self
     */
    public function setDownload($download)
    {
        if (is_null($download)) {
            throw new \InvalidArgumentException('non-nullable download cannot be null');
        }
        $this->container['download'] = $download;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale for the update
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \OpenWPAPI\Model\UpdateOfferPackages|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \OpenWPAPI\Model\UpdateOfferPackages|null $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets current
     *
     * @return string|null
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param string|null $current The current version of the software
     *
     * @return self
     */
    public function setCurrent($current)
    {
        if (is_null($current)) {
            throw new \InvalidArgumentException('non-nullable current cannot be null');
        }
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The new version available for update
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets php_version
     *
     * @return string|null
     */
    public function getPhpVersion()
    {
        return $this->container['php_version'];
    }

    /**
     * Sets php_version
     *
     * @param string|null $php_version Required PHP version
     *
     * @return self
     */
    public function setPhpVersion($php_version)
    {
        if (is_null($php_version)) {
            throw new \InvalidArgumentException('non-nullable php_version cannot be null');
        }
        $this->container['php_version'] = $php_version;

        return $this;
    }

    /**
     * Gets mysql_version
     *
     * @return string|null
     */
    public function getMysqlVersion()
    {
        return $this->container['mysql_version'];
    }

    /**
     * Sets mysql_version
     *
     * @param string|null $mysql_version Required MySQL version
     *
     * @return self
     */
    public function setMysqlVersion($mysql_version)
    {
        if (is_null($mysql_version)) {
            throw new \InvalidArgumentException('non-nullable mysql_version cannot be null');
        }
        $this->container['mysql_version'] = $mysql_version;

        return $this;
    }

    /**
     * Gets new_bundled
     *
     * @return string|null
     */
    public function getNewBundled()
    {
        return $this->container['new_bundled'];
    }

    /**
     * Sets new_bundled
     *
     * @param string|null $new_bundled New bundled version
     *
     * @return self
     */
    public function setNewBundled($new_bundled)
    {
        if (is_null($new_bundled)) {
            throw new \InvalidArgumentException('non-nullable new_bundled cannot be null');
        }
        $this->container['new_bundled'] = $new_bundled;

        return $this;
    }

    /**
     * Gets partial_version
     *
     * @return string|null
     */
    public function getPartialVersion()
    {
        return $this->container['partial_version'];
    }

    /**
     * Sets partial_version
     *
     * @param string|null $partial_version The partial version if applicable
     *
     * @return self
     */
    public function setPartialVersion($partial_version)
    {
        if (is_null($partial_version)) {
            array_push($this->openAPINullablesSetToNull, 'partial_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partial_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partial_version'] = $partial_version;

        return $this;
    }

    /**
     * Gets new_files
     *
     * @return bool|null
     */
    public function getNewFiles()
    {
        return $this->container['new_files'];
    }

    /**
     * Sets new_files
     *
     * @param bool|null $new_files Whether new files are included in the update
     *
     * @return self
     */
    public function setNewFiles($new_files)
    {
        if (is_null($new_files)) {
            throw new \InvalidArgumentException('non-nullable new_files cannot be null');
        }
        $this->container['new_files'] = $new_files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


