<?php
/**
 * ThemeOffer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenWPAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenWP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenWPAPI\Model;

use \ArrayAccess;
use \OpenWPAPI\ObjectSerializer;

/**
 * ThemeOffer Class Doc Comment
 *
 * @category Class
 * @package  OpenWPAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThemeOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThemeOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'slug' => 'string',
        'version' => 'string',
        'url' => 'string',
        'package' => 'string',
        'tested' => 'string',
        'requires_php' => 'string',
        'autoupdate' => 'bool',
        'icons' => 'array<string,string>',
        'banners' => 'array<string,string>',
        'banners_rtl' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'slug' => null,
        'version' => null,
        'url' => null,
        'package' => null,
        'tested' => null,
        'requires_php' => null,
        'autoupdate' => null,
        'icons' => null,
        'banners' => null,
        'banners_rtl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'slug' => false,
        'version' => false,
        'url' => false,
        'package' => true,
        'tested' => true,
        'requires_php' => true,
        'autoupdate' => true,
        'icons' => true,
        'banners' => true,
        'banners_rtl' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'slug' => 'slug',
        'version' => 'version',
        'url' => 'url',
        'package' => 'package',
        'tested' => 'tested',
        'requires_php' => 'requires_php',
        'autoupdate' => 'autoupdate',
        'icons' => 'icons',
        'banners' => 'banners',
        'banners_rtl' => 'banners_rtl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'slug' => 'setSlug',
        'version' => 'setVersion',
        'url' => 'setUrl',
        'package' => 'setPackage',
        'tested' => 'setTested',
        'requires_php' => 'setRequiresPhp',
        'autoupdate' => 'setAutoupdate',
        'icons' => 'setIcons',
        'banners' => 'setBanners',
        'banners_rtl' => 'setBannersRtl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'slug' => 'getSlug',
        'version' => 'getVersion',
        'url' => 'getUrl',
        'package' => 'getPackage',
        'tested' => 'getTested',
        'requires_php' => 'getRequiresPhp',
        'autoupdate' => 'getAutoupdate',
        'icons' => 'getIcons',
        'banners' => 'getBanners',
        'banners_rtl' => 'getBannersRtl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
        $this->setIfExists('tested', $data ?? [], null);
        $this->setIfExists('requires_php', $data ?? [], null);
        $this->setIfExists('autoupdate', $data ?? [], null);
        $this->setIfExists('icons', $data ?? [], null);
        $this->setIfExists('banners', $data ?? [], null);
        $this->setIfExists('banners_rtl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Optional. ID of the plugin for update purposes, should be a URI specified in the `Update URI` header field.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Slug of the plugin.
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The version of the plugin.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The URL for details of the plugin.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets package
     *
     * @return string|null
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param string|null $package Optional. The update ZIP for the plugin.
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            array_push($this->openAPINullablesSetToNull, 'package');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets tested
     *
     * @return string|null
     */
    public function getTested()
    {
        return $this->container['tested'];
    }

    /**
     * Sets tested
     *
     * @param string|null $tested Optional. The version of WordPress the plugin is tested against.
     *
     * @return self
     */
    public function setTested($tested)
    {
        if (is_null($tested)) {
            array_push($this->openAPINullablesSetToNull, 'tested');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tested', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tested'] = $tested;

        return $this;
    }

    /**
     * Gets requires_php
     *
     * @return string|null
     */
    public function getRequiresPhp()
    {
        return $this->container['requires_php'];
    }

    /**
     * Sets requires_php
     *
     * @param string|null $requires_php Optional. The version of PHP which the plugin requires.
     *
     * @return self
     */
    public function setRequiresPhp($requires_php)
    {
        if (is_null($requires_php)) {
            array_push($this->openAPINullablesSetToNull, 'requires_php');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requires_php', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requires_php'] = $requires_php;

        return $this;
    }

    /**
     * Gets autoupdate
     *
     * @return bool|null
     */
    public function getAutoupdate()
    {
        return $this->container['autoupdate'];
    }

    /**
     * Sets autoupdate
     *
     * @param bool|null $autoupdate Optional. Whether the plugin should automatically update.
     *
     * @return self
     */
    public function setAutoupdate($autoupdate)
    {
        if (is_null($autoupdate)) {
            array_push($this->openAPINullablesSetToNull, 'autoupdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autoupdate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autoupdate'] = $autoupdate;

        return $this;
    }

    /**
     * Gets icons
     *
     * @return array<string,string>|null
     */
    public function getIcons()
    {
        return $this->container['icons'];
    }

    /**
     * Sets icons
     *
     * @param array<string,string>|null $icons Optional. Array of plugin icons.
     *
     * @return self
     */
    public function setIcons($icons)
    {
        if (is_null($icons)) {
            array_push($this->openAPINullablesSetToNull, 'icons');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icons', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icons'] = $icons;

        return $this;
    }

    /**
     * Gets banners
     *
     * @return array<string,string>|null
     */
    public function getBanners()
    {
        return $this->container['banners'];
    }

    /**
     * Sets banners
     *
     * @param array<string,string>|null $banners Optional. Array of plugin banners.
     *
     * @return self
     */
    public function setBanners($banners)
    {
        if (is_null($banners)) {
            array_push($this->openAPINullablesSetToNull, 'banners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banners'] = $banners;

        return $this;
    }

    /**
     * Gets banners_rtl
     *
     * @return array<string,string>|null
     */
    public function getBannersRtl()
    {
        return $this->container['banners_rtl'];
    }

    /**
     * Sets banners_rtl
     *
     * @param array<string,string>|null $banners_rtl Optional. Array of plugin RTL banners.
     *
     * @return self
     */
    public function setBannersRtl($banners_rtl)
    {
        if (is_null($banners_rtl)) {
            array_push($this->openAPINullablesSetToNull, 'banners_rtl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('banners_rtl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['banners_rtl'] = $banners_rtl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


